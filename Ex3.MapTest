package Exe.EX3;
import Exe.EX3.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class MapTest {
	Map map2 = new Map(10,10,7);
	
	@Test
	void testWidth() {
	int w = map2.getWidth();
	assertEquals(w , 10);		
	}
	
	@Test
	void testHeight(){
		int h = map2.getHeight();
		assertEquals(h, 10);
		
	}
	
    @Test
    void testInit() {
    	for(int i = 0 ; i < 10 ; i++) {
    		for(int j = 0 ; j < 10 ; j++) {
    			assertEquals(map2.getMap()[i][j] , 7);
    		}
    	}
    }
    
    @Test
    public void testRaggedArrayisMap() {
    	int [][] ragArr = {{1,2,3} ,{1,2} ,{1,2,3,4}};
    	Map map3 = new Map(ragArr);

        assertEquals(false,Map.is2DArray(ragArr));
}
    
    @Test
    public void testEmptyArray() {
    	int [][] emptyArr = null;

    	Map map4 = new Map(emptyArr);

     Assertions.assertEquals(null,map4.getMap());
}
    
    @Test 
    public void test2DArray() {
    	int [][] ragArr = {{1,2,3} ,{1,2} ,{1,2,3,4}};
    	boolean isit = Map.is2DArray(ragArr);
         assertEquals(isit ,false);
    }
    @Test 
    public void test2DArray2() {
    	int [][] ragArr = null;
    	boolean isit = Map.is2DArray(ragArr);
         assertEquals(isit ,false);
    }
    
    
    @Test
    public void testGetPixel() {
    	map2.getPixel(2,3);
    	assertEquals(map2.getPixel(2, 3) , map2.getMap()[2][3] );
    }
    @Test
    public void testSetPixel() {
    	Map map5 = new Map(10,10,7);

    	map5.setPixel(2,4 ,6);
    	assertEquals(map5.getPixel(2, 4) , 6);

    }
    @Test
   
    public void testFillRecUnchanged() {
    	Map map6 = new Map (5,5,-2);
    	map6.setPixel(2, 1, -1);
    	map6.setPixel(2, 2, -1);
    	map6.setPixel(2, 3, -1);
    	map6.setPixel(2, 4, -1);
    	map6.setPixel(2, 0, -1);
    	map6.fillRec(0,0,-2,6);
    	
    	assertEquals(map6.getPixel(4, 4) , -2);
    }
    @Test
    public void testFillRecChanged() {
    	Map map6 = new Map (5,5,-2);
    	map6.setPixel(2, 1, -1);
    	map6.setPixel(2, 2, -1);
    	map6.setPixel(2, 3, -1);
    	map6.setPixel(2, 4, -1);
    	map6.setPixel(2, 0, -1);
    	map6.fillRec(0,0,-2,6);
    	
    	assertEquals(map6.getPixel(1, 2) , 6);
    	
    }
    @Test
    public void testFillRecObst() {
    	Map map6 = new Map (5,5,-2);
    	map6.setPixel(2, 1, -1);
    	map6.setPixel(2, 2, -1);
    	map6.setPixel(2, 3, -1);
    	map6.setPixel(2, 4, -1);
    	map6.setPixel(2, 0, -1);
    	map6.fillRec(0,0,-2,6);
    	
    	assertEquals(map6.getPixel(2, 2) , -1);
    }
    @Test 
    public void testFillCountNoCyclic() {
    	Index2D ind1 = new Index2D(4,3);
    	Map map6 = new Map (5,5,-2);
    	map6.setCyclic(false);
    	map6.setPixel(2, 1, -1);
    	map6.setPixel(2, 2, -1);
    	map6.setPixel(2, 3, -1);
    	map6.setPixel(2, 4, -1);
    	map6.setPixel(2, 0, -1);
    	assertEquals(map6.fill(ind1, 0),10);
    }
    @Test 
    public void testFillCountCyclic() {
    	Index2D ind1 = new Index2D(4,3);
    	Map map6 = new Map (5,5,-2);
    	map6.setPixel(2, 1, -1);
    	map6.setPixel(2, 2, -1);
    	map6.setPixel(2, 3, -1);
    	map6.setPixel(2, 4, -1);
    	map6.setPixel(2, 0, -1);
    	assertEquals(map6.fill(ind1, 0),20);
    }
    @Test 
    public void testFillCountNoCyclicWithHole() {
    	Index2D ind1 = new Index2D(4,3);
    	Map map6 = new Map (5,5,-2);
    	map6.setCyclic(false);
    	map6.setPixel(2, 1, -1);
    	map6.setPixel(2, 2, -1);
    	map6.setPixel(2, 4, -1);
    	map6.setPixel(2, 0, -1);
    	assertEquals(map6.fill(ind1, 0),21);
    }
   
   @Test
   public void testNeighborCount() {
	   Map map6 = new Map (5,5,-2);
	   	map6.setCyclic(false);
	   	map6.setPixel(2, 1, -1);
	   	map6.setPixel(2, 2, -1);
	   	map6.setPixel(2, 3, -1);
	   	map6.setPixel(2, 4, -1);
	   int arr[][] = map6.neighborCount(1,4,-1);
	       assertEquals(arr[3][4],10);
   }
   @Test
   public void testNeighborCount2() {
	   Map map6 = new Map (5,5,-2);
	   	map6.setCyclic(false);
	   	map6.setPixel(2, 1, -1);
	   	map6.setPixel(2, 2, -1);
	   	map6.setPixel(2, 3, -1);
	   	map6.setPixel(2, 4, -1);
	   int arr[][] = map6.neighborCount(1,1,-1);
	       assertEquals(6,arr[3][3]);
   }
   @Test
   public void testNeighborCountObs() {
	   Map map6 = new Map (5,5,-2);
	   	map6.setCyclic(false);
	   	map6.setPixel(2, 1, -1);
	   	map6.setPixel(2, 2, -1);
	   	map6.setPixel(2, 3, -1);
	   	map6.setPixel(2, 4, -1);
	   int arr[][] = map6.neighborCount(1,1,-1);
	       assertEquals(-1,arr[2][2]);
   }
   
   @Test
   public void testNeighborCountCyclic() {
	   Map map6 = new Map (5,5,-2);
	   	map6.setPixel(2, 1, -1);
	   	map6.setPixel(2, 2, -1);
	   	map6.setPixel(2, 3, -1);
	   	map6.setPixel(2, 4, -1);
	   int arr[][] = map6.neighborCount(0,0,-1);
	       assertEquals(1,arr[4][0]);
   }
   @Test
   public void testNeighborCountBlocked() {
	   Map map6 = new Map (5,5,-2);
	   	map6.setCyclic(false);
	   	map6.setPixel(2, 1, -1);
	   	map6.setPixel(2, 2, -1);
	   	map6.setPixel(2, 3, -1);
	   	map6.setPixel(2, 4, -1);
	   	map6.setPixel(2, 0 ,-1);
	   int arr[][] = map6.neighborCount(1,1,-1);
	       assertEquals(-2,arr[3][3]);
   }
   /*
   {4,3,-1,7,8}
   {3,2,-1,6,7}
   {2,1,-1,5,6}
   {1,0,-1,4,5}
   {2,1, 2,3,4}
   */
   @Test
   public void testCheckNeigh() {
	   Map map6 = new Map (5,5,-2);
	   	map6.setCyclic(false);

	   map6.setPixel(2, 1, -1);
	   map6.setPixel(2, 2, -1);
	   map6.setPixel(2, 3, -1);
	   map6.setPixel(2, 4, -1);
	   int map[][] =   map6.neighborCount(1,1,-1);
	   Map map7 = new Map(map);
	   map7.setCyclic(false);
       int arr [][] = map7.checkNeigh(3, 4, -1, map, -2);
	   assertEquals( arr[5][0],2);
   }
   
   @Test
   public void testCheckNeighCyclic() {
	   Map map6 = new Map (5,5,-2);
	   map6.setCyclic(true);
	   map6.setPixel(2, 1, -1);
	   map6.setPixel(2, 2, -1);
	   map6.setPixel(2, 3, -1);
	   map6.setPixel(2, 4, -1);
	   int map[][] =   map6.neighborCount(1,4,-1);
	   Map map7 = new Map(map);
	   map7.setCyclic(true);
       int arr [][] = map7.checkNeigh(3, 4, -1, map, -2);      
	   assertEquals( arr[3][0],1);
   }
   
   @Test
   public void testShoretstCyclic() {
	   Map map6 = new Map (5,5,-2);
	   map6.setCyclic(true);
	   map6.setPixel(2, 1, -1);
	   map6.setPixel(2, 2, -1);
	   map6.setPixel(2, 3, -1);
	   map6.setPixel(2, 4, -1);
	   Index2D indStart = new Index2D(3, 4);
	   Index2D indEnd = new Index2D(1, 1);
	   Pixel2D [] array = map6.shortestPath(indStart , indEnd , -1);
	   assertEquals(array.length,6);   
   }
   
   @Test
   public void testShoretst() {
	   Map map6 = new Map (5,5,-2);
	   map6.setCyclic(false);
	   map6.setPixel(2, 1, -1);
	   map6.setPixel(2, 2, -1);
	   map6.setPixel(2, 3, -1);
	   map6.setPixel(2, 4, -1);
	   Index2D indStart = new Index2D(3, 4);
	   Index2D indEnd = new Index2D(1, 1);
	   Pixel2D [] array = map6.shortestPath(indStart , indEnd , -1);
	   assertEquals(array.length,8);   
   }
   
   @Test
   public void testShoretstIndValue() {
	   Map map6 = new Map (5,5,-2);
	   map6.setCyclic(false);
	   map6.setPixel(2, 1, -1);
	   map6.setPixel(2, 2, -1);
	   map6.setPixel(2, 3, -1);
	   map6.setPixel(2, 4, -1);
	   Index2D indStart = new Index2D(3, 4);
	   Index2D indEnd = new Index2D(1, 1);
	   Pixel2D [] array = map6.shortestPath(indStart , indEnd , -1);
	   int num = map6.getPixel(3, 4);
	   assertEquals(num,-2);   
   }
   @Test
   public void testShoretstBlocked() {
	   Map map6 = new Map (5,5,-2);
	   map6.setCyclic(false);
	   map6.setPixel(2, 1, -1);
	   map6.setPixel(2, 2, -1);
	   map6.setPixel(2, 3, -1);
	   map6.setPixel(2, 4, -1);
	   map6.setPixel(2, 0, -1);
	   Index2D indStart = new Index2D(3, 4);
	   Index2D indEnd = new Index2D(1, 1);
	   Pixel2D [] array = map6.shortestPath(indStart , indEnd , -1);
	   assertEquals(array,null);   
   }
  @Test
  public void testAllDistance() {
	  Map map6 = new Map (5,5,-3);
	   map6.setCyclic(false);
	   map6.setPixel(2, 1, -2);
	   map6.setPixel(2, 2, -2);
	   map6.setPixel(2, 3, -2);
	   map6.setPixel(2, 4, -2);
	   Index2D indStart = new Index2D(3, 4);
	   assertEquals(map6.allDistance(indStart , -2).getPixel(4,4) , 1);
	   
  }
  @Test
  public void testAllDistanceBarrier() {
	  Map map6 = new Map (5,5,-3);
	   map6.setCyclic(false);
	   map6.setPixel(2, 1, -2);
	   map6.setPixel(2, 2, -2);
	   map6.setPixel(2, 3, -2);
	   map6.setPixel(2, 4, -2);
	   map6.setPixel(2, 0,-2);
	   Index2D indStart = new Index2D(3, 4);
	   assertEquals(map6.allDistance(indStart , -2).getPixel(1,1) , -1);
	   
  }
  @Test
  public void testAllDistanceObs() {
	  Map map6 = new Map (5,5,-3);
	   map6.setCyclic(false);
	   map6.setPixel(2, 1, -2);
	   map6.setPixel(2, 2, -2);
	   map6.setPixel(2, 3, -2);
	   map6.setPixel(2, 4, -2);
	   Index2D indStart = new Index2D(3, 4);
	   assertEquals(map6.allDistance(indStart , -2).getPixel(2,4) , -2);
	   
  }
  @Test
  public void testAllDistanceCyclic() {
	  Map map6 = new Map (5,5,-3);
	   map6.setCyclic(true);
	   map6.setPixel(2, 1, -2);
	   map6.setPixel(2, 2, -2);
	   map6.setPixel(2, 3, -2);
	   map6.setPixel(2, 4, -2);
	   Index2D indStart = new Index2D(3, 4);
	   assertEquals(map6.allDistance(indStart , -2).getPixel(0,4) , 2);
	   
  }
}
