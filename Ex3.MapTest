package Exe.EX3;
import Exe.EX3.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class MapTest {
	Map map2 = new Map(10,10,7);
	
	@Test
	void testWidth() {
	int w = map2.getWidth();
	assertEquals(w , 10);		
	}
	
	@Test
	void testHeight(){
		int h = map2.getHeight();
		assertEquals(h, 10);
		
	}
	
    @Test
    void testInit() {
    	for(int i = 0 ; i < 10 ; i++) {
    		for(int j = 0 ; j < 10 ; j++) {
    			assertEquals(map2.getMap()[i][j] , 7);
    		}
    	}
    }
    
    @Test
    public void testRaggedArray() {
    	int [][] ragArr = {{1,2,3} ,{1,2} ,{1,2,3,4}};
    	Map map3 = new Map(ragArr);

     Assertions.assertEquals(null,map3.getMap());
}
    
    @Test
    public void testEmptyArray() {
    	int [][] emptyArr = null;

    	Map map4 = new Map(emptyArr);

     Assertions.assertEquals(null,map4.getMap());
}
    
    @Test 
    public void test2DArray() {
    	int [][] ragArr = {{1,2,3} ,{1,2} ,{1,2,3,4}};
    	boolean isit = Map.is2DArray(ragArr);
         assertEquals(isit ,false);
    }
    @Test 
    public void test2DArray2() {
    	int [][] ragArr = null;
    	boolean isit = Map.is2DArray(ragArr);
         assertEquals(isit ,false);
    }
    
    
    @Test
    public void testGetPixel() {
    	map2.getPixel(2,3);
    	assertEquals(map2.getPixel(2, 3) , map2.getMap()[2][3] );
    }
    @Test
    public void testSetPixel() {
    	Map map5 = new Map(10,10,7);

    	map5.setPixel(2,4 ,6);
    	assertEquals(map5.getPixel(2, 4) , 6);

    }
    @Test
    public void testFill() {
    	Map map6 = new Map (10,10,5);
    	map6.fillRec(4,5,5,6);
    	assertEquals(map6.getPixel(4, 4) , 5);
    }
   
      
    @Test
    public void testFillRec_ChangePixels() {
        int origColor = 1;
        int newColor = 3;
        int x = 0;
        int y = 0;
        int expectedCount = 16; // All 16 pixels should be changed

        int count = map2.fillRec(x, y, origColor, newColor);
        assertEquals(expectedCount, count);

        // Check if all pixels have the new color
        int[][] expectedMap = new int[][] {
                {3, 3, 3, 3},
                {3, 2, 2, 1},
                {3, 2, 2, 1},
                {3, 1, 1, 1}
        };
        assertArrayEquals(expectedMap, map2);
    }
    public void testCheckNeigh_ValidPath() {
        int x = 1;
        int y = 1;
        int obsColor = 2;
        int color = 3;

        int[][] map = new int[][] {
                {3, 2, 2, 3},
                {2, 0, 0, 2},
                {2, 0, 0, 2},
                {3, 2, 2, 3}
        };

        int[][] expectedPath = new int[][] {
                {1, 1},
                {1, 0},
                {0, 0},
                {0, 1}
        };

        int[][] result = map2.checkNeigh(x, y, obsColor, map, color);

        assertArrayEquals(expectedPath, result);
    }

    @Test
    public void testCheckNeigh_InvalidPath() {
        int x = 0;
        int y = 0;
        int obsColor = 2;
        int color = 3;

        int[][] map = new int[][] {
                {3, 2, 2, 3},
                {2, 0, 0, 2},
                {2, 0, 0, 2},
                {3, 2, 2, 3}
        };

        int[][] expectedPath = new int[][] {
                {-1}
        };

        int[][] result = map2.checkNeigh(x, y, obsColor, map, color);

        assertArrayEquals(expectedPath, result);
    }
}
